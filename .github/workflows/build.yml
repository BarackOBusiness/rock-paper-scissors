name: Build

on:
  push:
    # Only run on pushes to branches, no tags
    branches: '**'
  # Manual builds
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    env:
      CARGO_TERM_COLOR: always

    steps:
    - uses: actions/checkout@v3
    - name: Create output folder
      run: mkdir out

      # Install rust for each platform
      
    - name: Install Rust - MacOS
      if: matrix.os == 'macos-latest'
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: aarch64-apple-darwin

    - name: Install Rust - Windows
      if: matrix.os == 'windows-latest'
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Install GNU Windows toolchain
      if: matrix.os == 'ubuntu-latest'
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-pc-windows-gnu
    - name: Install Linux musl toolchain
      if: matrix.os == 'ubuntu-latest'
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-unknown-linux-musl
    - name: Install linux musl toolchain for AARCH64
      if: matrix.os == 'ubuntu-latest'
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: aarch64-unknown-linux-musl

    - name: Install linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install gcc-mingw-w64-x86-64 musl musl-tools gcc-aarch64-linux-gnu
        curl https://apt.llvm.org/llvm.sh | sudo bash -s 16

    - name: Install rust cache
      uses: Swatinem/rust-cache@v2

    - name: Lint code
      uses: actions-rs/cargo@v1
      with:
        command: clippy

    - name: Run tests
      uses: actions-rs/cargo@v1
      with: 
        command: test

    - name: Build macOS Intel
      if: matrix.os == 'macos-latest'
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --target=x86_64-apple-darwin --release
      
    - name: Build macOS ARM
      if: matrix.os == 'macos-latest'
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --target=aarch64-apple-darwin --release

    - name: Archive macOS outputs
      if: matrix.os == 'macos-latest'
      run: |
        zip -r out/rps-macos-x64.zip -j target/x86_64-apple-darwin/release/rps
        tar -caf out/rps-macos-arm.zip -j target/aarch64-apple-darwin/release/rps

    - name: Build Windows MSVC
      if: matrix.os == 'windows-latest'
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --target=x86_64-pc-windows-msvc --release

    - name: Archive Windows output
      if: matrix.os == 'windows-latest'
      run: Compress-Archive -Path "target\x86_64-pc-windows-msvc\release\rps.exe" -DestinationPath "out\rps-x86_64-pc-windows-msvc.zip"

    - name: Build Linux
      if: matrix.os == 'ubuntu-latest'
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --target=x86_64-unknown-linux-musl --release

    - name: Build ARM Linux
      if: matrix.os == 'ubuntu-latest'
      uses: actions-rs/cargo@v1
      with:
        command: rustc
        args: --target=aarch64-unknown-linux-musl --release -- -Clink-self-contained=yes -Clinker=rust-lld
      env:
        CC_aarch64_unknown-linux-musl: clang-16

    - name: Archive Linux outputs
      if: matrix.os == 'ubuntu-latest'
      run: |
        tar -caf out/rps-linux-static.tar.xz target/x86_64-unknown-linux-musl/release/rps
        tar -caf out/rps-linux-static-aarch64.tar.xz target/aarch64-unknown-linux-musl/release/rps

    - name: Build Windows GNU
      if: matrix.os == 'ubuntu-latest'
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --target=x86-64-pc-windows-gnu --release

    - name: Archive Windows GNU output
      if: matrix.os == 'ubuntu-latest'
      run: zip -r out/rps-x86_64-pc-windows-gnu.zip -j target/x86_64-pc-windows-gnu/release/rps.exe

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Binaries
        path: out/rps*.*
        if-no-files-found: error
